#!groovy

//Helper methods
def checkoutGitRepo(gitUrl, gitRef, credentialsID) {
    checkout([$class: 'GitSCM', branches: [[name: gitRef]],
            doGenerateSubmoduleConfigurations: false,
            extensions: [],
            submoduleCfg: [],
            userRemoteConfigs: [[credentialsId: credentialsID, url: gitUrl]]])
}
//

def installationGitUrl = params.installationGitUrl
def installationGitRef = params.installationGitRef

def githubCredentialsID = "jenkinsgithub"
def quayCredentialsID = "integreatly-quay"

def tagNames = params.tagNames.split(',') as List<String>
tagNames.removeAll([null, ""]);

stage('Fetch Installation Repo') {
    println("Fetch Installation Repo")

    node('cirhos_rhel7') {
        cleanWs()
        dir('installation') {
            checkoutGitRepo(installationGitUrl, installationGitRef, githubCredentialsID)
            releaseConfig = readYaml file: "COMPONENTS.yaml"
            componentConfigs = releaseConfig['components']
        }
    }
}

stage('Delete Image Tags') {
    print "Delete Image Tags: '${tagNames}'"

    def report = []
    def buildMods = [:]
    def repoUrls = []

    for (i = 0; i < componentConfigs.size(); i++) {
        def index = i
        if (componentConfigs[index]['imageUrl']) {
            repoUrls << componentConfigs[index]['imageUrl']
        }
    }

    for (i = 0; i < repoUrls.size(); i++) {
        def index = i
        def componentRepoUrl = repoUrls[index]

        report << "DELETING - tags '${tagNames}' on ${componentRepoUrl}"
        buildMods["Cleanup:${componentRepoUrl}"] = {
            node('cirhos_rhel7') {
                withCredentials([
                        usernameColonPassword(credentialsId: quayCredentialsID, variable: 'QUAY_CREDS'),
                ]) {

                    for (tag in tagNames) {
                        try {
                            sh """
                            skopeo delete \
                              --creds ${env.QUAY_CREDS} \
                              docker://${componentRepoUrl}:${tag}
                            """
                        } catch (err) {
                            println("Failed to delete ${componentRepoUrl}:${tag}, this is probably becasue it didn't exist for some reason!!")
                        }
                    }

                }
            }
        }
    }

    print report.join("\n")
    input "Careful now, deleting t:${tagNames} on ${repoUrls.size()} repos, Are you sure?"
    parallel buildMods
}
