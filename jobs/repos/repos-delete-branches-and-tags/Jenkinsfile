#!groovy

//Helper methods
def checkoutGitRepo(gitUrl, gitRef, credentialsID) {
    checkout([$class: 'GitSCM', branches: [[name: gitRef]],
            doGenerateSubmoduleConfigurations: false,
            extensions: [],
            submoduleCfg: [],
            userRemoteConfigs: [[credentialsId: credentialsID, url: gitUrl]]])
}
//

def installationGitUrl = params.installationGitUrl
def installationGitRef = params.installationGitRef

def githubCredentialsID = "jenkinsgithub"

def branchNames = params.branchNames.split(',') as List<String>
def tagNames = params.tagNames.split(',') as List<String>
branchNames.removeAll([null, ""]);
tagNames.removeAll([null, ""]);

stage('Fetch Installation Repo') {
    println("Fetch Installation Repo")

    node('cirhos_rhel7') {
        cleanWs()
        dir('installation') {
            checkoutGitRepo(installationGitUrl, installationGitRef, githubCredentialsID)
            releaseConfig = readYaml file: "COMPONENTS.yaml"
            componentConfigs = releaseConfig['components']
        }
    }
}

stage('Delete Branches and Tags') {
    print "Delete Branches: '${branchNames}' and Tags: '${tagNames}'"

    def report = []
    def gitUrls = []

    for (i = 0; i < componentConfigs.size(); i++) {
        def index = i
        if (componentConfigs[index]['gitUrl']) {
            gitUrls << componentConfigs[index]['gitUrl']
        }
    }

    for (i = 0; i < gitUrls.size(); i++) {
        def index = i
        def componentGitUrl = gitUrls[index]

        report << "DELETING - branches '${branchNames}' and tags '${tagNames}' on ${componentGitUrl}"
    }
    gitUrls << installationGitUrl
    report << "DELETING - branches '${branchNames}' and tags '${tagNames}' on ${installationGitUrl}"

    print report.join("\n")
    input "Careful now, deleting b:${branchNames} and t:${tagNames} on ${gitUrls.size()} repos, Are you sure?"

    node('cirhos_rhel7') {
        cleanWs()
        sshagent([githubCredentialsID]) {
            dir('deleteme') {
                sh('git init')
                for (i = 0; i < gitUrls.size(); i++) {
                    def index = i
                    def componentGitUrl = gitUrls[index]

                    retry(2) {
                        for (branch in branchNames) {
                            sh("git push ${componentGitUrl} +:refs/heads/${branch}")
                        }
                        for (tag in tagNames) {
                            sh("git push ${componentGitUrl} +:refs/tags/${tag}")
                        }
                    }
                }
            }
        }
        cleanWs()
    }
}
