def testOptions = [:]
final QE_REPO_URL = 'https://gitlab.cee.redhat.com/integreatly-qe/integreatly-qe.git'

def verifyParameters(testOptions) {
  if (!testOptions.gitUrl || !testOptions.gitBranch) {
    def userInput = input message: 'Integreatly Test Options', parameters: [
      string(defaultValue: (testOptions.gitUrl ?: 'https://github.com/integr8ly/installation.git'), description: 'Integreatly installer Git URL', name: 'installationGitUrl'),
      string(defaultValue: (testOptions.gitBranch ?: 'master'), description: 'Integreatly Git Branch', name: 'installationGitBranch'),
    ]

    testOptions.gitUrl = userInput.installationGitUrl
    testOptions.gitBranch = userInput.installationGitBranch
    if(!testOptions.clusterName) {
      testOptions.clusterName = userInput.installationGitBranch
      testOptions.openshiftMasterUrl = "https://${userInput.installationGitBranch}.${testOptions.domainName}"
    }
    verifyParameters(testOptions)
  }
}

def setClusterAdminCredentials() {
  def integreatlyCredentialsID = 'tower-openshift-cluster-credentials'
  def clusterAdminCredentials = [:]
  withCredentials([usernamePassword(credentialsId: integreatlyCredentialsID, usernameVariable: 'CLUSTER_ADMIN_USERNAME', passwordVariable: 'CLUSTER_ADMIN_PASSWORD')]) {
    clusterAdminCredentials.clusterAdminUsername = "${CLUSTER_ADMIN_USERNAME}"
    clusterAdminCredentials.clusterAdminPassword = "${CLUSTER_ADMIN_PASSWORD}"
  }
  return clusterAdminCredentials
}

def notifyBuild(String buildStatus, err) {
  buildStatus =  buildStatus ?: 'SUCCESS'
  
  String mailRecipients = "integreatly-qe@redhat.com"
  String subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  String body = "${subject}\n\n(${env.BUILD_URL})"

  if(err != null) {
      body = "${body}\n\n FAILURE was ${err}"
  }

  mail body: body, subject: subject, to: mailRecipients
}

def clusterAdminCredentials = setClusterAdminCredentials()

pipeline {
  agent {
    node {
      label 'cirhos_rhel7'
    }
  }

  stages {
    stage('Verify Parameters') {
      steps {
        script {
          testOptions.awsAccountName = 'fheng.AWS'
          testOptions.awsRegion = 'eu-west-2'
          testOptions.clusterName = params.clusterName ? params.clusterName : params.installationGitBranch
          testOptions.domainName = 'skunkhenry.com'
          testOptions.gitUrl = params.installationGitUrl
          testOptions.gitBranch = params.installationGitBranch
          testOptions.openshiftMasterUrl = "https://${testOptions.clusterName}.${testOptions.domainName}"
          verifyParameters(testOptions)
        }
      }
    }

    stage('Cluster Create') {
      steps {
        echo "[INFO] Creating ${testOptions.clusterName} cluster"
        script {
          def jobName = 'openshift-cluster-create'
          def jobParams = [
            [$class: 'StringParameterValue', name: 'clusterName', value: testOptions.clusterName],
            [$class: 'StringParameterValue', name: 'awsRegion', value: testOptions.awsRegion],
            [$class: 'StringParameterValue', name: 'awsAccountName', value: testOptions.awsAccountName],
            [$class: 'BooleanParameterValue', name: 'dryRun', value: params.dryRun]
          ]
          build job: jobName, parameters: jobParams
        }
      }
    }

    stage('Install Integreatly') {
      steps {
        echo "[INFO] Installing Integreatly in ${testOptions.clusterName} cluster"
        script {
          jobName = 'openshift-cluster-integreatly-install'
          jobParams = [
            [$class: 'StringParameterValue', name: 'clusterName', value: testOptions.clusterName],
            [$class: 'StringParameterValue', name: 'openshiftMasterUrl', value: testOptions.openshiftMasterUrl],
            [$class: 'StringParameterValue', name: 'installationGitUrl', value: testOptions.gitUrl],
            [$class: 'StringParameterValue', name: 'installationGitBranch', value: testOptions.gitBranch],
            [$class: 'BooleanParameterValue', name: 'dryRun', value: params.dryRun]
          ]
          build job: jobName, parameters: jobParams
        }
      } 
    }

    stage('Test Integreatly') {
      steps {
        echo "[INFO] Running Tests on Integreatly"
        script { 
          jobParams = [
            [$class: 'StringParameterValue', name: 'REPOSITORY', value: QE_REPO_URL],
            [$class: 'StringParameterValue', name: 'BRANCH', value: 'master'],
            [$class: 'StringParameterValue', name: 'CLUSTER_URL', value: testOptions.openshiftMasterUrl],
            [$class: 'StringParameterValue', name: 'EVALS_USERNAME', value: 'evals05@example.com'],
            [$class: 'StringParameterValue', name: 'ADMIN_USERNAME', value: clusterAdminCredentials.clusterAdminUsername],
            [$class: 'StringParameterValue', name: 'ADMIN_PASSWORD', value: clusterAdminCredentials.clusterAdminPassword],
            [$class: 'StringParameterValue', name: 'CUSTOMER_ADMIN_USERNAME', value: 'customer-admin@example.com'],
            [$class: 'StringParameterValue', name: 'CUSTOMER_ADMIN_PASSWORD', value: 'Password1'],
            [$class: 'StringParameterValue', name: 'TIMEOUT_THRESHOLD', value: '2'],
            [$class: 'StringParameterValue', name: 'NAMESPACE_PREFIX', value: 'openshift-'],
            [$class: 'StringParameterValue', name: 'WEBAPP_URL', value: "https://tutorial-web-app-openshift-webapp.apps.${testOptions.clusterName}.skunkhenry.com"],
            [$class: 'BooleanParameterValue', name: 'CLEAN_RESOURCES', value: true],
            [$class: 'StringParameterValue', name: 'MANIFEST_VERSION', value: 'master'],
            [$class: 'BooleanParameterValue', name: 'TESTING_MASTER', value: false],
            [$class: 'StringParameterValue', name: 'SSO_URL', value: "https://sso-openshift-sso.apps.${testOptions.clusterName}.skunkhenry.com"],
            [$class: 'StringParameterValue', name: 'NUMBER_OF_USERS', value: '5']
          ]

          if (params.dryRun) {
            println "Would run the job 'all-tests-executor' with the following parameters:\n${jobParams}"
          } else {
            buildStatus = build(job: 'all-tests-executor', propagate: false, parameters: jobParams).result
            println "Build finished with ${buildStatus}"
                              
            if (buildStatus != 'SUCCESS') {
              currentBuild.result = 'UNSTABLE'
            }
          }
        }
      }
    }

    stage('Uninstall Integreatly') {
      steps {
        echo "[INFO] Uninstalling Integreatly from ${testOptions.clusterName}"
        script {
          jobName = 'openshift-cluster-integreatly-uninstall'
          jobParams = [
            [$class: 'StringParameterValue', name: 'clusterName', value: testOptions.clusterName],
            [$class: 'StringParameterValue', name: 'openshiftMasterUrl', value: testOptions.openshiftMasterUrl],
            [$class: 'StringParameterValue', name: 'installationGitBranch', value: testOptions.gitUrl],
            [$class: 'StringParameterValue', name: 'installationGitBranch', value: testOptions.gitBranch],
            [$class: 'BooleanParameterValue', name: 'dryRun', value: params.dryRun]
          ]
          build job: jobName, parameters: jobParams
        }
      }
    }
  }

  post {
    always {
      echo "[INFO] Deprovision ${testOptions.clusterName} cluster"
      script {
        if (testOptions.clusterName) {
          jobName = 'openshift-cluster-deprovision'
          jobParams = [
            [$class: 'StringParameterValue', name: 'clusterName', value: testOptions.clusterName],
            [$class: 'StringParameterValue', name: 'awsRegion', value: testOptions.awsRegion],
            [$class: 'StringParameterValue', name: 'awsAccountName', value: testOptions.awsAccountName],
            [$class: 'StringParameterValue', name: 'clusterDomainName', value: testOptions.domainName],
            [$class: 'BooleanParameterValue', name: 'dryRun', value: params.dryRun]
          ]
          build job: jobName, parameters: jobParams

          notifyBuild(currentBuild.result, null)
        } else {
          println "[INFO] Cluster name not available, skipping deprovision"
        }
      }
    }
  }
}
