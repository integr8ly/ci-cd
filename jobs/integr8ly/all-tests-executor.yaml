---

- job:
    name: all-tests-executor
    project-type: pipeline
    description: "Pipeline to run all of the available integreatly tests"
    sandbox: true
    properties:
      - build-discarder:
          num-to-keep: 20
    parameters:
      - string:
          name: REPOSITORY
          default: 'https://gitlab.cee.redhat.com/integreatly-qe/integreatly-qe.git'
          description: 'QE repository containing the smoke tests source code.'
      - string:
          name: BRANCH
          default: 'master'
          description: 'Branch of the repository'
      - string:
          name: CLUSTER_URL
          description: 'URL of cluster on which the smoke tests will be executed.'
      - string:
          name: EVALS_USERNAME
          default: 'evals11@example.com'
          description: 'Evals account email address for checking created namespaces.'    
      - string:
          name: EVALS_PASSWORD
          default: 'Password1'
          description: 'Evals user password'
      - string:
          name: ADMIN_USERNAME
          default: 'admin@example.com'
          description: 'Admin sername to login to Integreatly cluster.'
      - string:
          name: ADMIN_PASSWORD
          default: 'Password1'
          description: 'Admin password to login to Integreatly cluster.'
      - string:
          name: CUSTOMER_ADMIN_USERNAME
          default: 'customer-admin@example.com'
          description: 'customer-admin username to login to Integreatly cluster.'
      - string:
          name: CUSTOMER_ADMIN_PASSWORD
          default: 'Password1'
          description: 'Password to login to Integreatly cluster.'
      - string:
          name: RELEASE_VERSION
          default: 'master'
          description: 'This optional parameter allows to test particular release version. If not provided, master will be used'
      - string:
          name: NAMESPACE_PREFIX
          description: "Value used to prefix the names of the namespaces created during Integr8ly installation"
      - string:
          name: WEBAPP_URL
          description: 'URL of Tutorial Web App'
      - bool:
          name: CLEAN_RESOURCES
          default: true
          description: 'depending on whether the resources should be cleaned after the successful execution'
      - string:
          name: MANIFEST_VERSION
          default: 'master'
          description: 'Provide release version when testing particular release (smoke tests)'
      - bool:
          name: TESTING_MASTER
          default: true
          description: 'Indicates whether to check master tags or compare versions from manifest file (smoke tests)'   
      - string:
          name: WALKTHROUGHS_VERSION
          default: ''
          description: 'Provide walkthroughs release version. Empty value means the master version is expected (smoke tests)'
      - string:
          name: SSO_URL
          description: 'SSO URL for the cluster on which the tests will be executed (sso-user-create test)'
      - string:
          name: NUMBER_OF_USERS
          default: "5"
          description: 'Number of created users (sso-user-create test)'
    dsl: |
        parameters = [
            string(name: 'REPOSITORY', value: "${REPOSITORY}"),
            string(name: 'BRANCH', value: "${BRANCH}"),
            string(name: 'CLUSTER_URL', value: "${CLUSTER_URL}"),
            string(name: 'EVALS_USERNAME', value: "${EVALS_USERNAME}"),
            string(name: 'EVALS_PASSWORD', value: "${EVALS_PASSWORD}"),
            string(name: 'ADMIN_USERNAME', value: "${ADMIN_USERNAME}"),
            string(name: 'ADMIN_PASSWORD', value: "${ADMIN_PASSWORD}"),
            string(name: 'CUSTOMER_ADMIN_USERNAME', value: "${CUSTOMER_ADMIN_USERNAME}"),
            string(name: 'CUSTOMER_ADMIN_PASSWORD', value: "${CUSTOMER_ADMIN_PASSWORD}"),
            string(name: 'RELEASE_VERSION', value: "${RELEASE_VERSION}"),
            string(name: 'NAMESPACE_PREFIX', value: "${NAMESPACE_PREFIX}"),
            string(name: 'WEBAPP_URL', value: "${WEBAPP_URL}"),
            booleanParam(name: 'CLEAN_RESOURCES', value: Boolean.valueOf("${CLEAN_RESOURCES}")),
            string(name: 'MANIFEST_VERSION', value: "${MANIFEST_VERSION}"),
            booleanParam(name: 'TESTING_MASTER', value: Boolean.valueOf("${TESTING_MASTER}")),
            string(name: 'WALKTHROUGHS_VERSION', value: "${WALKTHROUGHS_VERSION}"),
            string(name: 'SSO_URL', value: "${SSO_URL}"),
            string(name: 'NUMBER_OF_USERS', value: "${NUMBER_OF_USERS}"),
        ]
        def err = null
        try {
            timeout(180) { ansiColor('gnome-terminal') { timestamps {
                node('cirhos_rhel7') {
                    
                    stage ('Smoke Tests') {
                        runTests('installation-smoke-tests')
                    } // stage

                    stage ('Browser Based Tests') {
                        runTests('browser-based-testsuite-pipeline')
                    } // stage

                    stage ('After First Login Tests') {
                        runTests('after-first-login-tests')
                    } // stage

                    stage ('Customer Admin permissions test') {
                        runTests('customer-admin-permissions-test')
                    } // stage

                    stage ('Launcher test') {
                        runTests('launcher-tests')
                    } // stage

                    stage ('SSO user creation test') {
                        runTests('sso-user-create-tests')
                    } // stage

                    stage ('Walkthrough 1 test') {
                        runTests('w1-test-executor')
                    } // stage

                    stage ('Alerts test') {
                        runTests('alerts-test')
                    } // stage

                } // node
            }}} // timeout, ansiColor, timestamps
        } catch (caughtError){
            currentBuild.result = 'FAILURE'
        }

        def runTests(testPipeline) {
            buildStatus = build(job: testPipeline, propagate: false, parameters: parameters).result
            println "Build finished with ${buildStatus}"
                            
            if (buildStatus != 'SUCCESS') {
                currentBuild.result = 'UNSTABLE'
            }
        }
