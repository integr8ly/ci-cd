---

- job:
    name: poc-testing-executor
    project-type: pipeline
    description: "Nightly pipeline for testing on POC (originally Pony) clusters."
    sandbox: false
    concurrent: true
    properties:
      - build-discarder:
          num-to-keep: 20
    parameters:
        - string:
            name: GH_CLIENT_ID
            description: "GitHub OAuth Client ID, required for some of the walkthroughs. Can be left empty"
        - string:
            name: GH_CLIENT_SECRET
            description: "GitHub OAuth Client Secret, required for some of the walkthroughs. Can be left empty"
        - bool:
            name: SELF_SIGNED_CERTS
            default: false
            description: "Indicates whether the cluster uses self signed certificates or not.
This needs to be changed to 'false' for Integreatly Workshop since it uses valid certificates."
        - string:
            name: RECIPIENTS
            default: integreatly-qe@redhat.com
            description: "Whitespace- or comma-separated list of recipient addresses"
        - string:
            name: INSTALLATION_REPOSITORY
            default: https://github.com/integr8ly/installation.git
            description: "Repository of the Integreatly installer"
        - string:
            name: INSTALLATION_BRANCH
            default: master
            description: "Branch of the installer repository"
        - string:
            name: TEST_SUITES_REPOSITORY
            default: https://gitlab.cee.redhat.com/integreatly-qe/integreatly-qe.git
            description: "Repository of the Integreatly test suites"
        - string:
            name: TEST_SUITES_BRANCH
            default: master
            description: "Branch of a repository of Integreatly test suites"
        - string:
            name: CLUSTER_HOSTNAME
            default: integreatly-qe.rhmi.io
            description: "Hostname of the POC cluster"
        - string:
            name: MASTER_URLS
            description: "Comma separated list of URLs for master nodes of target cluster to be used in Ansible inventory file"
        - string:
            name: ANSIBLE_USER
            default: root
            description: "User for Ansible to access the master node of target cluster"
        - string:
            name: OC_USER
            default: integreatly
            description: "Default OpenShift admin user when Integr8ly is not installed."
        - string:
            name: OC_PASSWORD
            default: Password1
            description: "Default OpenShift admin password when Integr8ly is not installed."
        - string:
            name: NAMESPACE_PREFIX
            default: openshift-
            description: "This value will be prefixed to the names of the namespaces created during Integr8ly installation"
        - choice:
            name: TO_DO
            description: "It specifies what stages of the pipeline will be executed. 'full' means uninstall + uninstall + install + install + tests + uninstall + install"
            choices:
              - full
              - install + tests
              - uninstall + install + tests    
    dsl: |
        def err = null
        try {
            timeout(180) { ansiColor('gnome-terminal') { timestamps {
                node('cirhos_rhel7') {        
                    stage('Verify input') {
                        if (!MASTER_URLS) {
                            throw new hudson.AbortException('MASTER_URLS parameter is required!')
                        } // if
                        if (!CLUSTER_HOSTNAME) {
                            throw new hudson.AbortException('CLUSTER_HOSTNAME parameter is required!')
                        } // if
                        if (!OC_USER) {
                            throw new hudson.AbortException('OC_USER parameter is required!')
                        } // if
                        if (!OC_PASSWORD) {
                            throw new hudson.AbortException('OC_PASSWORD parameter is required!')
                        } // if
                    } // stage

                    stage ('Uninstall #1') {
                        if (TO_DO.contains('full') || TO_DO.contains('uninstall')) {
                            uninstall(5)
                        } else {
                            println 'Uninstall #1 skipped'
                        }
                    } // stage
                    
                    stage ('Uninstall #2') {
                        if (TO_DO.contains('full')) {
                            uninstall(1)
                        } else {
                            println 'Uninstall #2 skipped'
                        }
                    } // stage
                    
                    stage ('Install #1') {
                        if (TO_DO.contains('full')) {
                            install(true) // sleep after install
                        } else {
                            install(false) // no sleep after install
                        }
                    } // stage

                    stage ('Install #2') {
                        if (TO_DO.contains('full')) {
                            install(true) // sleep after install
                        } else {
                            println 'Install #2 skipped'
                        }
                    } // stage
                    
                    stage ('Smoke Tests') {
                        runTests('installation-smoke-tests')
                    } // stage

                    stage ('Browser Based Tests') {
                        runTests('browser-based-testsuite-pipeline')
                        sleep time: 3, unit: 'MINUTES'
                    } // stage
                    
                    stage ('After First Login Tests') {
                        runTests('after-first-login-tests')
                    } // stage 

                    stage ('Uninstall #3') {
                        if (TO_DO.contains('full')) {
                            uninstall(3)
                        } else {
                            println 'Uninstall #3 skipped'
                        }
                    } // stage
                    
                    stage ('Install #3') {
                        if (TO_DO.contains('full')) {
                            install(false) // no sleep after install
                        } else {
                            println 'Install #3 skipped'
                        }
                    } // stage

                } // node
            }}} // timeout, ansiColor, timestamps
        } catch (caughtError){
            currentBuild.result = 'FAILURE'
            err = caughtError 
        } finally {
            notifyBuild(currentBuild.result, err)
        }

                // Waiting for ${sleepTime} minutes so that resources scheduled for termination are actually terminated
        def uninstall(sleepTime) {
            build job: 'poc-uninstall', parameters: [
                string(name: 'REPOSITORY', value: "${INSTALLATION_REPOSITORY}"),
                string(name: 'BRANCH', value: "${INSTALLATION_BRANCH}"),
                string(name: 'CLUSTER_URL', value: "https://${CLUSTER_HOSTNAME}"),
                string(name: 'ANSIBLE_USER', value: "${ANSIBLE_USER}"),
                string(name: 'MASTER_URLS', value: "${MASTER_URLS}"),
                string(name: 'NAMESPACE_PREFIX', value: "${NAMESPACE_PREFIX}"),
                string(name: 'OC_USER', value: "${OC_USER}"),
                string(name: 'OC_PASSWORD', value: "${OC_PASSWORD}")]

            sleep time: sleepTime, unit: 'MINUTES'
        }

        def install(sleepAfterInstall) {
            build job: 'poc-install', parameters: [
                string(name: 'REPOSITORY', value: "${INSTALLATION_REPOSITORY}"),
                string(name: 'BRANCH', value: "${INSTALLATION_BRANCH}"),
                string(name: 'CLUSTER_URL', value: "https://${CLUSTER_HOSTNAME}"),
                string(name: 'GH_CLIENT_ID', value: "${GH_CLIENT_ID}"),
                string(name: 'GH_CLIENT_SECRET', value: "${GH_CLIENT_SECRET}"),
                booleanParam(name: 'SELF_SIGNED_CERTS', value: Boolean.valueOf("${SELF_SIGNED_CERTS}")),
                string(name: 'ANSIBLE_USER', value: "${ANSIBLE_USER}"),
                string(name: 'MASTER_URLS', value: "${MASTER_URLS}"),
                string(name: 'NAMESPACE_PREFIX', value: "${NAMESPACE_PREFIX}"),
                string(name: 'OC_USER', value: "${OC_USER}"),
                string(name: 'OC_PASSWORD', value: "${OC_PASSWORD}")]
            
            if (sleepAfterInstall) {
                sleep time: 3, unit: 'MINUTES'
            }
        }

        def runTests(testPipeline) {
            parameters = [
                string(name: 'REPOSITORY', value: "${TEST_SUITES_REPOSITORY}"),
                string(name: 'BRANCH', value: "${TEST_SUITES_BRANCH}"),
                string(name: 'CLUSTER_URL', value: "https://${CLUSTER_HOSTNAME}"),
                string(name: 'ADMIN_USERNAME', value: "${OC_USER}"),
                string(name: 'ADMIN_PASSWORD', value: "${OC_PASSWORD}"),
                string(name: 'NAMESPACE_PREFIX', value: "${NAMESPACE_PREFIX}")
            ]

            if (testPipeline == 'after-first-login-tests') {
                parameters.add(string(name: 'EVALS_USERNAME', value: 'evals11@example.com'))
                parameters.add(string(name: 'EVALS_PASSWORD', value: 'Password1'))
            }

            if (testPipeline == 'browser-based-testsuite-pipeline') {
                parameters.add(string(name: 'WEBAPP_URL', value: "https://tutorial-web-app-webapp.apps.${CLUSTER_HOSTNAME}"))
                parameters.add(string(name: 'EVALS_USERNAME', value: 'evals11@example.com'))
                parameters.add(string(name: 'EVALS_PASSWORD', value: 'Password1'))
            }

            buildStatus = build(job: testPipeline, propagate: false, parameters: parameters).result
            println "Build finished with ${buildStatus}"
                            
            if (buildStatus != 'SUCCESS') {
                currentBuild.result = 'UNSTABLE'
            }
        }

        def notifyBuild(String buildStatus, err) {
            
            // In theory, null means success. In practise if there is an error thrown elsewhere than in the triggered jobs (eg. in wokraround scripts)
            // the job fails but success will be stored in buildStatus anyway
            buildStatus =  buildStatus ?: 'SUCCESS'
            
            String mailRecipients = "${RECIPIENTS}"
            String subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
            String body = "${subject}\n\n(${env.BUILD_URL})"

            if(err != null) {
                body = "${body}\n\n FAILURE was ${err}"
            }

            mail body: body, subject: subject, to: mailRecipients
        }
