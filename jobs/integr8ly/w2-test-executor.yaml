---

- job:
    name: w2-test-executor
    project-type: pipeline
    sandbox: false
    parameters:
      - string:
          name: REPOSITORY
          default: 'https://gitlab.cee.redhat.com/integreatly-qe/integreatly-qe.git'
          description: 'QE repository containing the tests source code.'
      - string:
          name: BRANCH
          default: 'master'
          description: 'Branch of the repository'
      - string:
          name: CLUSTER_URL
          description: 'URL of cluster on which the W1 test will be executed.'
      - string:
          name: NAMESPACE_PREFIX
          description: "Value used to prefix the names of the namespaces created during Integr8ly installation"
      - string: 
          name: ADMIN_USERNAME
          default: 'admin@example.com'
          description: 'Admin user name to login to Integreatly cluster.'
      - string: 
          name: ADMIN_PASSWORD
          default: 'Password1'
          description: 'Admin password to login to Integreatly cluster.'
      - string:
          name: EVALS_USERNAME
          default: 'evals11@example.com'
          description: 'Evals user name'
      - string:
          name: TIMEOUT_THRESHOLD
          default: '1'
          description: 'optionally increase timeout values. If you provide value 2 it means it will be sleeping/waiting two times longer'      
    dsl: |
        def err = null
        try {
            timeout(40) { 
                ansiColor('gnome-terminal') { 
                    timestamps {
                        node('cirhos_rhel7') {        
                            stage('Verify input') {
                                if (!CLUSTER_URL) {
                                    throw new hudson.AbortException('CLUSTER_URL parameter is required!')
                                } // if
                            } // stage

                            stage('Run Launcher test') {
                                buildStatus = build(job: 'launcher-tests', parameters: [
                                    string(name: 'REPOSITORY', value: "${REPOSITORY}"),
                                    string(name: 'BRANCH', value: "${BRANCH}"),
                                    string(name: 'CLUSTER_URL', value: "${CLUSTER_URL}"),
                                    string(name: 'NAMESPACE_PREFIX', value: "${NAMESPACE_PREFIX}"),
                                    string(name: 'ADMIN_USERNAME', value: "${ADMIN_USERNAME}"),
                                    string(name: 'ADMIN_PASSWORD', value: "${ADMIN_PASSWORD}"),
                                    string(name: 'EVALS_USERNAME', value: "${EVALS_USERNAME}"),
                                    string(name: 'TIMEOUT_THRESHOLD', value: "${TIMEOUT_THRESHOLD}"),
                                    booleanParam(name: 'CLEAN_RESOURCES', value: true)
                                ]).result;

                                println "Build finished with ${buildStatus}"
                                if (buildStatus != 'SUCCESS') {
                                    currentBuild.result = 'UNSTABLE'
                                }
                            }

                            stage('Clone QE repository') {
                                dir('.') {
                                    git branch: "${BRANCH}", url: "${REPOSITORY}"
                                }
                            }
                
                            stage('Run the 3scale test') {
                                dir('test-suites/backend-testsuite') {
                                    sh '''
                                        npm install
                                        ./node_modules/gulp/bin/gulp.js 3scale | tee output.txt
                                    '''  
                                    String output = readFile("output.txt");
                                    
                                    if(!output.contains('3scale W2 API management tests')) {
                                        currentBuild.result = 'FAILURE'
                                        publishTestResults = false
                                    } else if(output.contains('There were test failures')) {
                                        currentBuild.result = 'UNSTABLE'
                                    }
                                }
                            }
                        } // node end
                    }
                }  
            } // timeout end
        } catch (caughtError){
            currentBuild.result = 'FAILURE'
            err = caughtError 
        }
