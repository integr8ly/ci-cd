---

- job:
    name: pds-testing-executor
    project-type: pipeline
    description: "General pipeline for PDS testing."
    sandbox: false
    concurrent: true
    properties:
      - build-discarder:
          num-to-keep: 56
    parameters:
        - string:
            name: YOURCITY
            description: "City or Customer (5 char min.) plus the generated hash, e.g. qebrno-5d10 [required]"
        - string:
            name: GH_CLIENT_ID
            description: "GitHub OAuth Client ID, required for some of the walkthroughs. Can be left empty"
        - string:
            name: GH_CLIENT_SECRET
            description: "GitHub OAuth Client Secret, required for some of the walkthroughs. Can be left empty"
        - bool:
            name: SELF_SIGNED_CERTS
            default: true
            description: "Indicates whether the cluster uses self signed certificates or not.
This needs to be changed to 'false' for Integreatly Workshop since it uses valid certificates."
        - string:
            name: RECIPIENTS
            default: integreatly-qe@redhat.com
            description: "Whitespace- or comma-separated list of recipient addresses"
        - string:
            name: INSTALLATION_REPOSITORY
            default: https://github.com/integr8ly/installation.git
            description: "Repository of the Integreatly installer"
        - string:
            name: INSTALLATION_BRANCH
            default: master
            description: "Branch of the installer repository"
        - string:
            name: TEST_SUITES_REPOSITORY
            default: https://gitlab.cee.redhat.com/integreatly-qe/integreatly-qe.git
            description: "Repository of the Integreatly test suites"
        - string:
            name: TEST_SUITES_BRANCH
            default: master
            description: "Branch of a repository of Integreatly test suites"
        - string:
            name: EVALS_USERNAME
            default: 'evals11@example.com'
            description: 'Evals account email address used in test suites.'
        - string:
            name: ADMIN_USERNAME
            default: 'admin@example.com'
            description: 'Admin sername to login to Integreatly cluster.'
        - string:
            name: ADMIN_PASSWORD
            default: 'Password1'
            description: 'Admin password to login to Integreatly cluster.'
        - string:
            name: CUSTOMER_ADMIN_USERNAME
            default: 'customer-admin@example.com'
            description: 'customer-admin username to login to Integreatly cluster.'
        - string:
            name: CUSTOMER_ADMIN_PASSWORD
            default: 'Password1'
            description: 'Password to login to Integreatly cluster.'
        - bool:
            name: CLEAN_RESOURCES
            default: true
            description: 'depending on whether the resources should be cleaned after the successful execution of certain tests'
        - string:
            name: MANIFEST_VERSION
            default: 'master'
            description: 'Provide release version when testing particular release (smoke tests)'
        - bool:
            name: TESTING_MASTER
            default: true
            description: 'Indicates whether to check master tags or compare versions from manifest file (smoke tests)'
        - string:
            name: NUMBER_OF_USERS
            default: "5"
            description: 'Number of created users (sso-user-create test)'
        - bool:
            name: PATCH_TO_MASTER
            default: false
            description: "Indicates whether the components should be patched to master during installation"
        - string:
            name: NAMESPACE_PREFIX
            description: "This value will be prefixed to the names of the namespaces created during Integr8ly installation. Defaulting to empty string for RHPDS"
        - choice:
            name: TO_DO
            description: "It specifies what stages of the pipeline will be executed. 'full' means uninstall + uninstall + install + install + tests + uninstall + install"
            choices:
              - full
              - install + tests
              - uninstall + install + tests
    dsl: |
        def err = null
        
        try {
            timeout(270) { ansiColor('gnome-terminal') { timestamps {
                node('cirhos_rhel7') {
                    
                    stage ('Uninstall #1') {
                        if (TO_DO.contains('full') || TO_DO.contains('uninstall')) {
                            uninstall(5)
                        } else {
                            println 'Uninstall #1 skipped'
                        }
                    } // stage
                    
                    stage ('Uninstall #2') {
                        if (TO_DO.contains('full')) {
                            uninstall(1)
                        } else {
                            println 'Uninstall #2 skipped'
                        }
                    } // stage
                    
                    stage ('Install #1') {
                        if (TO_DO.contains('full')) {
                            install(true) // sleep after install
                        } else {
                            install(false) // no sleep after install
                        }
                    } // stage

                    stage ('Install #2') {
                        if (TO_DO.contains('full')) {
                            install(true) // sleep after install
                        } else {
                            println 'Install #2 skipped'
                        }
                    } // stage
                    
                    stage ('Run Tests') {
                        runTests()
                    } // stage

                    stage ('Uninstall #3') {
                        if (TO_DO.contains('full')) {
                            uninstall(3)
                        } else {
                            println 'Uninstall #3 skipped'
                        }
                    } // stage
                    
                    stage ('Install #3') {
                        if (TO_DO.contains('full')) {
                            install(false) // no sleep after install
                        } else {
                            println 'Install #3 skipped'
                        }
                    } // stage
                } // node
            }}} // timeout, ansiColor, timestamps
        } catch (caughtError){
            currentBuild.result = 'FAILURE'
            err = caughtError 
        } finally {
            notifyBuild(currentBuild.result, err)
        }

        // Waiting for ${sleepTime} minutes so that resources scheduled for termination are actually terminated
        def uninstall(sleepTime) {
            build job: 'pds-uninstall', parameters: [
                string(name: 'REPOSITORY', value: "${INSTALLATION_REPOSITORY}"),
                string(name: 'BRANCH', value: "${INSTALLATION_BRANCH}"),
                string(name: 'ANSIBLE_USER', value: 'ec2-user'),
                string(name: 'YOURCITY', value: "${YOURCITY}"),
                string(name: 'BASTION_USER', value: 'ec2-user'),
                string(name: 'NAMESPACE_PREFIX', value: "${NAMESPACE_PREFIX}"),
                string(name: 'BASTION_PRIVATE_KEY_ID', value: 'pds-bastion-pem')]

            sleep time: sleepTime, unit: 'MINUTES'
        }

        def install(sleepAfterInstall) {
            build job: 'pds-install', parameters: [
                string(name: 'REPOSITORY', value: "${INSTALLATION_REPOSITORY}"),
                string(name: 'BRANCH', value: "${INSTALLATION_BRANCH}"),
                string(name: 'GH_CLIENT_ID', value: "${GH_CLIENT_ID}"),
                string(name: 'GH_CLIENT_SECRET', value: "${GH_CLIENT_SECRET}"),
                booleanParam(name: 'PATCH_TO_MASTER', value: Boolean.valueOf("${PATCH_TO_MASTER}")),
                booleanParam(name: 'SELF_SIGNED_CERTS', value: Boolean.valueOf("${SELF_SIGNED_CERTS}")),
                string(name: 'ANSIBLE_USER', value: 'ec2-user'),
                string(name: 'YOURCITY', value: "${YOURCITY}"),
                string(name: 'BASTION_USER', value: 'ec2-user'),
                string(name: 'NAMESPACE_PREFIX', value: "${NAMESPACE_PREFIX}"),
                string(name: 'BASTION_PRIVATE_KEY_ID', value: 'pds-bastion-pem')]
            
            if (sleepAfterInstall) {
                sleep time: 3, unit: 'MINUTES'
            }
        }

        def runTests() {

            parameters = [
                string(name: 'REPOSITORY', value: "${TEST_SUITES_REPOSITORY}"),
                string(name: 'BRANCH', value: "${TEST_SUITES_BRANCH}"),
                string(name: 'CLUSTER_URL', value: "https://master.${YOURCITY}.openshiftworkshop.com"),
                string(name: 'EVALS_USERNAME', value: "${EVALS_USERNAME}"),
                string(name: 'ADMIN_USERNAME', value: "${ADMIN_USERNAME}"),
                string(name: 'ADMIN_PASSWORD', value: "${ADMIN_PASSWORD}"),
                string(name: 'CUSTOMER_ADMIN_USERNAME', value: "${CUSTOMER_ADMIN_USERNAME}"),
                string(name: 'CUSTOMER_ADMIN_PASSWORD', value: "${CUSTOMER_ADMIN_PASSWORD}"),
                string(name: 'NAMESPACE_PREFIX', value: "${NAMESPACE_PREFIX}"),
                string(name: 'WEBAPP_URL', value: "https://tutorial-web-app-${NAMESPACE_PREFIX}webapp.apps.${YOURCITY}.openshiftworkshop.com"),
                booleanParam(name: 'CLEAN_RESOURCES', value: Boolean.valueOf("${CLEAN_RESOURCES}")),
                string(name: 'MANIFEST_VERSION', value: "${MANIFEST_VERSION}"),
                booleanParam(name: 'TESTING_MASTER', value: Boolean.valueOf("${TESTING_MASTER}")),
                string(name: 'SSO_URL', value: "https://sso-${NAMESPACE_PREFIX}sso.apps.${YOURCITY}.openshiftworkshop.com"),
                string(name: 'NUMBER_OF_USERS', value: "${NUMBER_OF_USERS}")
            ]

            buildStatus = build(job: 'all-tests-executor', propagate: false, parameters: parameters).result
            println "Build finished with ${buildStatus}"
                            
            if (buildStatus != 'SUCCESS') {
                currentBuild.result = 'UNSTABLE'
            }
        }

        def notifyBuild(String buildStatus, err) {
            
            // In theory, null means success. In practise if there is an error thrown elsewhere than in the triggered jobs (eg. in wokraround scripts)
            // the job fails but success will be stored in buildStatus anyway
            buildStatus =  buildStatus ?: 'SUCCESS'
            
            String mailRecipients = "${RECIPIENTS}"
            String subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
            String body = "${subject}\n\n(${env.BUILD_URL})"

            if(err != null){
                body = "${body}\n\n FAILURE was ${err}"
            }

            mail body: body, subject: subject, to: mailRecipients
        }
