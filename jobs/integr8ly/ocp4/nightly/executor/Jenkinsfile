#!groovy
if (params.CLUSTER_NAME.toString().trim() == "") {
    error "CLUSTER_NAME is required to run this pipeline!"
}
String clusterName = CLUSTER_NAME
String clusterInfoDirectory = "osd_clusters/" + clusterName
String installConfigDirectory = ""
String rootWorkspaceDir = ""
String clusterInfoFileName = "clusterInfo.json"
String clusterCredentialsFileName = "clusterCredentials.json"

def err = null
String apiURL = ""
String adminPassword = ""
String domainName = ""

try {
    timeout(240) { ansiColor('gnome-terminal') { timestamps {
        node('cirhos_rhel7') {
            stage("Make sure cluster name is unique") {
                dir("rhmi-jenkins") {
                    git branch: "master", url: "https://gitlab.cee.redhat.com/integreatly-qe/rhmi-jenkins.git"
                    if (TO_DO.contains('provision')) {
                        def dirExists = fileExists(clusterInfoDirectory)
                        while (dirExists) {
                            clusterName = "${clusterName}1"
                            clusterInfoDirectory = "osd_clusters/" + clusterName
                            dirExists = fileExists(clusterInfoDirectory)
                        }
                    }
                }
            }
            
            stage ('Provision') {
                if (TO_DO.contains('provision')) {
                    provisionCluster(clusterName)
                } else {
                    println 'Provision skipped'
                }
            } // stage
            
            stage ('Obtain cluster info') {
                withCredentials([string(credentialsId: "gitlab-access-token", variable: "GITLAB_ACCESS_TOKEN")]) {
                    dir("rhmi-jenkins") {
                        sh(
                            returnStdout: false,
                            script: """
                                git remote add jenkins https://oauth2:${GITLAB_ACCESS_TOKEN}@gitlab.cee.redhat.com/integreatly-qe/rhmi-jenkins.git | true
                                git config --global user.email "integreatly-qe@redhat.com" | true
                                git config --global user.name "rhmi-jenkins-bot" | true
                                git pull jenkins master
                            """
                        )
                        def dirExists = fileExists(clusterInfoDirectory)
                        if (!dirExists) {
                            error "[ERROR] no configuration files found for ${clusterName}! Make sure that the cluster exists!"
                        } 
                        rootWorkspaceDir = sh (
                            script: "pwd",
                            returnStdout: true
                        ).trim()
                        installConfigDirectory = rootWorkspaceDir + "/" + clusterInfoDirectory + "/"
                        apiURL = sh (
                            script: "cat ${installConfigDirectory}${clusterInfoFileName} | jq -r .api.url",
                            returnStdout: true
                        )
                        domainName = apiURL.substring((apiURL.indexOf(clusterName) + clusterName.length() + 1), apiURL.lastIndexOf(":"))
                        adminPassword = sh (
                            script: "cat ${installConfigDirectory}${clusterCredentialsFileName} | jq -r .admin.password",
                            returnStdout: true
                        )
                    }
                }
            } // stage

            stage ('Install') {
                install(clusterName, domainName, adminPassword)
            } // stage

            stage ('Add htpasswd IDP') {
                addIDP(clusterName, domainName, adminPassword)
            } // stage

            stage ('Test') {
                if (TO_DO.contains('tests')) {
                    test(clusterName, domainName, adminPassword)
                } else {
                    println 'Tests skipped'
                }
            } // stage
            
            stage ('Deprovision') {
                if (TO_DO.contains('destroy')) {
                    deprovisionCluster(clusterName)
                } else {
                    println 'Deprovision skipped'
                }
            } // stage

        } // node
    }}} // timeout, ansiColor, timestamps
} catch (caughtError){
    currentBuild.result = 'FAILURE'
    err = caughtError 
} finally {
    notifyBuild(currentBuild.result, err)
}

// Waiting for ${sleepTime} minutes so that resources scheduled for termination are actually terminated
def provisionCluster(clusterName) {
    build job: 'openshift4-osd-cluster-create', parameters: [
        string(name: 'CLUSTER_NAME', value: clusterName),
        string(name: 'RECIPIENTS', value: "${RECIPIENTS}"),
        booleanParam(name: 'BYOC', value:  Boolean.valueOf(BYOC)),
        string(name: "AWS_CREDENTIALS", value: "${AWS_CREDENTIALS}"),
        string(name: "AWS_ACCOUNT_ID", value: "${AWS_ACCOUNT_ID}")
    ]
    sleep time: 15, unit: 'MINUTES'
}

def install(clusterName, clusterDomain, password) {
    parameters = [
        string(name: 'CLUSTER_NAME', value: clusterName),
        string(name: 'CLUSTER_DOMAIN', value: clusterDomain),
        string(name: 'ADMIN_PASSWORD', value: password),
        string(name: 'INTEGREATLY_OPERATOR_BRANCH', value: "${INTEGREATLY_OPERATOR_BRANCH}"),
        string(name: 'INSTALLATION_PREFIX', value: "${INSTALLATION_PREFIX}"),
        string(name: 'RECIPIENTS', value: "${RECIPIENTS}"),
        booleanParam(name: 'BYOC', value:  Boolean.valueOf(BYOC))
    ]
    if (OLM_INSTALLATION.toString() == 'true') {   
        build (job: 'openshift4-managed-api-olm-install', parameters: parameters)
    } else {
        build (job: 'openshift4-managed-api-image-deploy-install', parameters: parameters)
    }
    sleep time: 3, unit: 'MINUTES'
}

def addIDP(clusterName, clusterDomain, password) {
    build job: 'openshift4-htpasswd-setup', parameters: [
        string(name: 'CLUSTER_NAME', value: clusterName),
        string(name: 'CLUSTER_DOMAIN', value: clusterDomain),
        string(name: 'INTEGREATLY_OPERATOR_BRANCH', value: "${INTEGREATLY_OPERATOR_BRANCH}"),
        string(name: 'ADMIN_PASSWORD', value: password)
    ]
}

def test(clusterName, clusterDomain, password) {
    parameters = [
        string(name: 'CLUSTER_NAME', value: clusterName),
        string(name: 'CLUSTER_DOMAIN', value: clusterDomain),
        string(name: 'ADMIN_PASSWORD', value: password),
        string(name: 'NAMESPACE_PREFIX', value: "${INSTALLATION_PREFIX}-")
    ]
    
    if (OLM_INSTALLATION.toString() == 'true') {
        parameters.add(string(name: 'BRANCH', value: 'v2-olm-1.15'))
    }

    buildStatus = build(job: 'ocp4-all-tests-executor', parameters: parameters).result
    if (buildStatus != 'SUCCESS') {
        currentBuild.result = 'UNSTABLE'
    }
}

def deprovisionCluster(clusterName) {
    if (buildStatus == 'SUCCESS') {
        parameters = [
            string(name: 'CLUSTER_NAME', value: clusterName),
            string(name: 'RECIPIENTS', value: "${RECIPIENTS}"),
            booleanParam(name: 'BYOC', value:  Boolean.valueOf(BYOC)),
            string(name: 'NAMESPACE_PREFIX', value: "${INSTALLATION_PREFIX}-")
        ]

        build (job: 'openshift4-osd-cluster-deprovision', parameters: parameters)
    }
}

def notifyBuild(String buildStatus, err) {
    if (params.RECIPIENTS.toString().length() > 0) {
        buildStatus =  buildStatus ?: "SUCCESS"
    
        String mailRecipients = "${RECIPIENTS}"
        String subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
        String body = "${subject}\n\n(${env.BUILD_URL})"
    
        if (err != null) {
            body = "${body}\n\n FAILURE was ${err}"
        }
    
        mail body: body, subject: subject, to: mailRecipients   
    }
}
