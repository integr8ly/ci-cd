#!groovy
Boolean isPds = params.PDS_CLUSTER
Boolean selfSigned = params.SELF_SIGNED_CERTS

String clusterSuffix = isPds ? "cluster-${CLUSTER_NAME}.${CLUSTER_NAME}.${CLUSTER_DOMAIN}" : "${CLUSTER_NAME}.${CLUSTER_DOMAIN}"

String clusterAPI = "https://api.${clusterSuffix}:6443"

String selfSignedCerts = selfSigned ? "true" : "false"

String installationName = "example-installation"

String installationNamespace = "redhat-managed-api-operator"

String expectedOcCommandOutput = ""

//byoc = do not use cluster storage
String useClusterStorage = params.BYOC ? "false" : "true"

def err = null

node('cirhos_rhel7') {
    timeout(75) { ansiColor('gnome-terminal') { timestamps {
        try {
            currentBuild.displayName = "${currentBuild.displayName} ${CLUSTER_NAME}"

            stage('Clone integreatly-operator repository') {
                dir('integreatly-operator') {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: INTEGREATLY_OPERATOR_BRANCH]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [],
                        userRemoteConfigs: [[url: INTEGREATLY_OPERATOR_REPOSITORY]]
                    ])

                    sh "git clean -xdf"
                    sh "oc login ${clusterAPI} --insecure-skip-tls-verify=true -u ${ADMIN_USERNAME} -p ${ADMIN_PASSWORD}"
                } // dir
            } // stage

            stage ('Cleanup resources') {
                dir('integreatly-operator') {
                    sh(
                        returnStdout: false,
                        script: """
                            oc project ${installationNamespace} | true
                            oc delete secret oauth-client-secrets | true
                            oc delete installation example-installation --timeout=60s --wait | true
                            oc delete crd applicationmonitorings.applicationmonitoring.integreatly.org | true
                            oc delete crd blackboxtargets.applicationmonitoring.integreatly.org | true
                            oc delete crd grafanadashboards.integreatly.org | true
                            oc delete crd grafanadatasources.integreatly.org | true
                            oc delete crd grafanas.integreatly.org | true
                            oc delete crd installations.integreatly.org | true
                            oc delete crd webapps.integreatly.org | true
                            oc delete CatalogSourceConfig installed-integreatly-operator -n openshift-marketplace | true
                            oc delete OperatorSource integreatly-operators -n openshift-marketplace | true
                            oc delete ClusterRole integreatly-operator | true
                            oc delete ClusterRoleBinding integreatly-operator | true
                            oc delete ClusterRoleBinding integreatly-operator-cluster-view | true
                            oc delete namespace ${installationNamespace} --timeout=240s --wait | true
                        """
                    )
                }
            }

            stage ('Build and push new integreatly-image') {
                dir('integreatly-operator') {
                    withCredentials([string(credentialsId: "integreatly-quay-bot-password", variable: "PASSWORD")]) {
                        sh "docker login -u=\"integreatly+intlytravis\" -p=\"${PASSWORD}\" quay.io"
                        sh "mkdir -p $HOME/go/bin"
                        sh "PATH=$PATH:$HOME/go/bin make image/build/push ORG=integreatly TAG=nightly"
                    }
                }
            }

            stage ('Prepare cluster resources') {
                // note. `make cluster/prepare/osrc` needs to be removed when 
                dir('integreatly-operator') {
                    sh(
                        returnStdout: false,
                        script: """
                            make cluster/prepare/local
                        """
                    )
                }
            }

            stage('Fetch and deploy operator.yaml template') {
                sh "curl -O https://gitlab.cee.redhat.com/integreatly-qe/rhmi-jenkins/raw/master/templates/operator.yaml"
                sh "oc create -f operator.yaml"
            } // stage

            stage ('Create Installation CR') {
                dir('integreatly-operator') {
                    sh "oc project ${installationNamespace}"
                    sh "make deploy/integreatly-managed-api-cr.yml SELF_SIGNED_CERTS=${selfSignedCerts} INSTALLATION_NAME=${installationName} INSTALLATION_TYPE=${INSTALLATION_TYPE} INSTALLATION_PREFIX=${INSTALLATION_PREFIX} USE_CLUSTER_STORAGE=${useClusterStorage}"
                    sleep time: 2, unit: 'MINUTES'
                }
            } // stage

            stage ('Verify Installation Has Finished') {
                String[] stages = ["bootstrap", "cloud-resources", "monitoring",
                                   "authentication", "products", "solution-explorer"]
                int[] timeoutRetries = [10, 20, 20, 20, 60, 20]
                String getStageStatusCommand = ""
                
                for (int i = 0; i < stages.length; i++) {
                    int counter = 0
                    String stage = stages[i]
                    getStageStatusCommand = "oc get rhmi ${installationName} -n ${installationNamespace} --output=json -o jsonpath='{.status.stages.${stage}.phase}'"
                    expectedOcCommandOutput = getInstallationStatus(getStageStatusCommand)
                    while (!expectedOcCommandOutput.contains("completed")) {
                        println "${stage} stage has not completed yet"

                        sleep time: 30, unit: 'SECONDS'
                        expectedOcCommandOutput = getInstallationStatus(getStageStatusCommand)
                        counter++
                        if (counter == timeoutRetries[i]) {
                            error "${stage} did not complete in time!"
                        }
                    }
                    println "${stage} completed!"
                }
            } // stage
        } catch (caughtError){
            currentBuild.result = 'FAILURE'
            err = caughtError
        } finally {
            notifyBuild(currentBuild.result, err, clusterAPI, clusterSuffix)
        }
    }}} // timeout, ansiColor, timestamps
} // node

def getInstallationStatus(command) {
    String ocCommandOutput = sh (
        script: "${command}",
        returnStdout: true
    ).trim()
    return ocCommandOutput
}

def notifyBuild(String buildStatus, err, clusterAPI, clusterSuffix) {
    if (params.RECIPIENTS.toString().length() > 0) {
        buildStatus =  buildStatus ?: "SUCCESS"
    
        String mailRecipients = "${RECIPIENTS}"
        String subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
        String body = "${subject}\n\n(${env.BUILD_URL})"
    
        if (err != null) {
            body = "${body}\n\n FAILURE was ${err}"
        } else {
            body = "Installation complete\n\nCluster details:\n\nUsername: ${ADMIN_USERNAME}\nPassword: ${ADMIN_PASSWORD}\n" + 
                   "API url: ${clusterAPI}\nCluster console URL: https://console-openshift-console.apps.${clusterSuffix}"
        }
    
        mail body: body, subject: subject, to: mailRecipients   
    }
}
