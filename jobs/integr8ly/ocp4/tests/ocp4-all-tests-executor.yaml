---

- job:
    name: ocp4-all-tests-executor
    project-type: pipeline
    description: "Pipeline to run all of the available OS4 RHMI tests"
    sandbox: true
    properties:
      - build-discarder:
          num-to-keep: 56
    parameters:
      - string:
          name: REPOSITORY
          default: 'https://gitlab.cee.redhat.com/integreatly-qe/integreatly-qe.git'
          description: 'QE repository containing the smoke tests source code.'
      - string:
          name: BRANCH
          default: 'v2-master'
          description: 'Branch of the repository'
      - string:
          name: CLUSTER_URL
          description: 'URL of cluster on which the smoke tests will be executed.'
      - string:
          name: CLUSTER_NAME
          description: "City or customer for RHPDS cluster, for example qe-ocp4-[hash] or cluster name specified when creating it using openshift-install"
      - string:
          name: ADMIN_USERNAME
          default: 'kubeadmin'
          description: 'Admin sername to login to Integreatly cluster.'
      - string:
          name: ADMIN_PASSWORD
          default: ''
          description: 'Admin password to login to Integreatly cluster.'
      - string:
          name: CUSTOMER_ADMIN_USERNAME
          default: 'customer-admin'
          description: 'customer-admin username to login to Integreatly cluster.'
      - string:
          name: CUSTOMER_ADMIN_PASSWORD
          default: 'Password1'
          description: 'Password to login to Integreatly cluster.'
      - string:
          name: EVALS_USERNAME
          default: 'evals11@example.com'
          description: 'Evals account email address for checking created namespaces.'    
      - string:
          name: NAMESPACE_PREFIX
          default: 'openshift-'
          description: 'Value used to prefix the names of the namespaces created during Integr8ly installation'
      - string:
          name: TIMEOUT_THRESHOLD
          default: '1'
          description: 'optionally increase timeout values. If you provide value 2 it means it will be sleeping/waiting two times longer'
    dsl: |
        jobParams = [
            string(name: 'REPOSITORY', value: "${REPOSITORY}"),
            string(name: 'BRANCH', value: "${BRANCH}"),
            string(name: 'CLUSTER_URL', value: "${CLUSTER_URL}"),
            string(name: 'ADMIN_USERNAME', value: "${ADMIN_USERNAME}"),
            string(name: 'CUSTOMER_ADMIN_PASSWORD', value: "${CUSTOMER_ADMIN_PASSWORD}"),
            string(name: 'EVALS_USERNAME', value: "${EVALS_USERNAME}"),
            string(name: 'NAMESPACE_PREFIX', value: "${NAMESPACE_PREFIX}"),
            string(name: 'TIMEOUT_THRESHOLD', value: "${TIMEOUT_THRESHOLD}")
        ]
        def err = null
        def wtTestStatus;
        String adminPassword = params.ADMIN_PASSWORD
        try {
            timeout(180) { ansiColor('gnome-terminal') { timestamps {
                node('cirhos_rhel7') {
                    stage ("Obtain admin password") {
                        if (ADMIN_USERNAME == 'kubeadmin' && adminPassword.toString().length() == 0) {
                            String loginCredentialDirectory = "clusters/${CLUSTER_NAME}/auth/kubeadmin-password"
                            dir("rhmi-jenkins") {
                                git branch: "master", url: "https://gitlab.cee.redhat.com/integreatly-qe/rhmi-jenkins.git"
                                def dirExists = fileExists(loginCredentialDirectory)
                                if (!dirExists) {
                                    error noConfigFilesError
                                }
                                adminPassword = sh (
                                    script: "cat ${loginCredentialDirectory}",
                                    returnStdout: true
                                ).trim()
                            }
                        }
                        jobParams.add(string(name: 'ADMIN_PASSWORD', value: "${adminPassword}"))
                    }

                    stage ("Dedicated admin permissions") {
                        // this sleep time is required to finish up setting up oauth config after installation. In the future it can be replaced by a test(s)
                        // that can be executed straight after the installation that don't require customer-admin interactions
                        sleep time: 75, unit: 'SECONDS'
                        sh "oc login ${CLUSTER_URL} -u ${CUSTOMER_ADMIN_USERNAME} -p ${CUSTOMER_ADMIN_PASSWORD} --insecure-skip-tls-verify # to 'enable' the user"
                        // sleep is required to properly 'enable' customer-admin by the operator. In the future it can be replaced by a test(s)
                        // that can be executed straight after the installation that don't require customer-admin interactions
                        sleep time: 2, unit: 'MINUTES'
                        parameters = jobParams
                        parameters.add(string(name: 'CUSTOMER_ADMIN_USERNAME', value: "${CUSTOMER_ADMIN_USERNAME}"))
                        runTest('customer-admin-permissions-test', parameters)

                        testAdmin = "test-dedicated-admin"
                        println "creating ${testAdmin} and adding it to the dedicated admins group"

                        dir("htpasswd") {
                            sh(
                                returnStdout: false,
                                script: """
                                    oc login ${CLUSTER_URL} -u ${ADMIN_USERNAME} -p ${adminPassword} --insecure-skip-tls-verify
                                    oc get secret htpasswd-secret -n openshift-config -o 'go-template={{index .data "htpasswd"}}' | base64 --decode > htpasswd
                                    htpasswd -b htpasswd ${testAdmin} ${CUSTOMER_ADMIN_PASSWORD}
                                    oc delete secret htpasswd-secret -n openshift-config
                                    oc create secret generic htpasswd-secret --from-file=htpasswd=htpasswd -n openshift-config
                                    sleep 75
                                    oc adm groups add-users dedicated-admins ${testAdmin}
                                    oc login ${CLUSTER_URL} -u ${testAdmin} -p ${CUSTOMER_ADMIN_PASSWORD} --insecure-skip-tls-verify # to 'enable' the user
                                    oc login ${CLUSTER_URL} -u ${ADMIN_USERNAME} -p ${adminPassword} --insecure-skip-tls-verify
                                    rm htpasswd
                                """
                            )

                            // some time is needed to the new dedicated admin permissions propagation, hence the sleep time
                            sleep time: 2, unit: 'MINUTES'

                            testAdminParams = jobParams
                            testAdminParams.add(string(name: 'CUSTOMER_ADMIN_USERNAME', value: "${testAdmin}"))
                            runTest('customer-admin-permissions-test', testAdminParams)

                            println "removing ${testAdmin} from the dedicated admins group"
                            sh "oc adm groups remove-users dedicated-admins ${testAdmin}"

                            // some time is needed for the test-dedicated-admin removal from dedicated-admins group propagation, hence the sleep time
                            sleep time: 2, unit: 'MINUTES'

                            runTest('customer-admin-permissions-test', testAdminParams)

                            println "removing ${testAdmin} completely"
                            sh(
                                returnStdout: false,
                                script: """
                                    oc get secret htpasswd-secret -n openshift-config -o 'go-template={{index .data "htpasswd"}}' | base64 --decode > htpasswd
                                    htpasswd -D htpasswd ${testAdmin}
                                    oc delete secret htpasswd-secret -n openshift-config
                                    oc create secret generic htpasswd-secret --from-file=htpasswd=htpasswd -n openshift-config
                                    oc delete user ${testAdmin}
                                    rm htpasswd
                                """
                            )
                        }
                    } // stage

                } // node
            }}} // timeout, ansiColor, timestamps
        } catch (caughtError){
            currentBuild.result = 'FAILURE'
        }

        def runTest(testPipeline, parameters) {
            buildStatus = build(job: testPipeline, propagate: false, parameters: parameters).result
            println "Build finished with ${buildStatus}"
                            
            if (buildStatus != 'SUCCESS') {
                currentBuild.result = 'UNSTABLE'
            }
        }
