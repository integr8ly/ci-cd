---

- job:
    name: pds-uninstall
    project-type: pipeline
    description: "Uninstalls Integreatly by using bastion server as Jenkins slave and executing Ansible uninstallation playbook there."
    sandbox: false
    concurrent: true
    parameters:
        - string:
            name: REPOSITORY
            default: https://github.com/integr8ly/installation.git
            description: "Repository of the Integreatly installer"
        - string:
            name: BRANCH
            default: 'master'
            description: "Branch of the installer repository"
        - string:
            name: YOURCITY
            description: "City or Customer (5 char min.) plus the generated hash, e.g. qebrno-5d10 [required]"    
        - string:
            name: CLUSTER_DOMAIN
            default: 'open.redhat.com'
            description: "Cluster domain - could be open.redhat.com or example.opentlc.com"
        - string:
            name: ANSIBLE_USER
            default: ec2-user
            description: "User for Ansible to access the master node of target cluster"
        - string:
            name: BASTION_USER
            default: ec2-user
            description: "User capable of SSH-ing to bastion server"
        - string:
            name: BASTION_PRIVATE_KEY_ID
            description: "ID of SSH Credentials (private key) used for SSH-ing to bastion"
        - string:
            name: NAMESPACE_PREFIX
            description: "This value will be used to define the prefix of the names of the namespaces deleted during uninstallation. Defaulting to empty string for RHPDS."
    dsl: |
        import hudson.model.*
        import jenkins.model.*
        import hudson.slaves.*
        import hudson.slaves.EnvironmentVariablesNodeProperty.Entry

        import hudson.plugins.sshslaves.verifiers.*

        String MASTER_URL = "master1.${YOURCITY}.internal"
        String BASTION_URL = "bastion.${YOURCITY}.${CLUSTER_DOMAIN}"    
        String bastionLabel = "${BASTION_URL}-slave"

        try {
            timeout(60) { ansiColor('gnome-terminal') { timestamps {
                node('cirhos_rhel7') {        
                    stage('Verify input') {
                        if (!YOURCITY) {
                            throw new hudson.AbortException('YOURCITY parameter is required!')
                        }
                    }

                    stage('Configure bastion as jenkins slave') {
                        
                        if(Jenkins.instance.getNode(bastionLabel)) {
                            println "Slave '${bastionLabel} already exists, skipping its creation."
                        } else {
                        
                            ComputerLauncher launcher = new hudson.plugins.sshslaves.SSHLauncher(
                                "${BASTION_URL}", // Host
                                22, // Port
                                "${BASTION_PRIVATE_KEY_ID}", // Credentials
                                (String)null, // JVM Options
                                (String)null, // JavaPath
                                (hudson.tools.JDKInstaller)null, //jdkInstaller
                                (String)null, // Prefix Start Slave Command
                                (String)null, // Suffix Start Slave Command
                                (Integer)null, // Launch Timeout in Seconds
                                (Integer)null, // Maximum Number of Retries
                                (Integer)null, // The number of seconds to wait between retries
                                new NonVerifyingKeyVerificationStrategy() // Host Key Verification Strategy
                            )
                            
                            // Define a "Permanent Agent"
                            Slave agent = new DumbSlave(
                                    bastionLabel,
                                    "/home/${BASTION_USER}",
                                    launcher)
                            agent.nodeDescription = "Bastion for ${JOB_NAME}"
                            agent.numExecutors = 3
                            agent.labelString = bastionLabel
                            agent.mode = Node.Mode.EXCLUSIVE
                            agent.retentionStrategy = new RetentionStrategy.Always()
                
                            // Create a "Permanent Agent"
                            Jenkins.instance.addNode(agent)
                            
                            println "Slave ${bastionLabel} has been created successfully."
                        } // end if
                    } // stage
                } // node

                node(bastionLabel) {
                    stage('Clone the installer') {
                        dir('installation') {
                            checkout([
                                $class: 'GitSCM',
                                branches: [[name: BRANCH]],,
                                doGenerateSubmoduleConfigurations: false,
                                extensions: [],
                                userRemoteConfigs: [[url: REPOSITORY]]
                            ])

                            sh "git clean -xdf"

                            if(!fileExists("evals")) {
                                sh "ln -s . evals"
                            }
                        } // dir
                    } // stage

                    stage('Prepare environment') {
                        dir('installation') {
                            sh """
                                cp ./evals/inventories/hosts.template ./evals/inventories/hosts
                                sed -i 's/ansible_user=ec2-user/ansible_user=${ANSIBLE_USER}/g' ./evals/inventories/hosts
                            """
                            
                            sh """
                                sed -i '\$!N;s@\\[master\\]\\n127.0.0.1@[master]\\n${MASTER_URL}@;P;D' ./evals/inventories/hosts
                                sed -i '\$!N;s@\\[master\\]\\nmaster.evals.example.com@[master]\\n${MASTER_URL}@;P;D' ./evals/inventories/hosts
                            """
                            
                            String output = readFile('./evals/inventories/hosts')
                            println output
                        } // dir
                    } // stage
                    
                    stage('Execute playbook') {
                        dir('installation/evals') {
                            sh """
                                sudo oc login -u system:admin
                                sudo ansible-playbook -i ./inventories/hosts ./playbooks/uninstall.yml -e ns_prefix=${NAMESPACE_PREFIX}
                            """
                        } // dir
                    } // stage
                } // node

            }}} // timeout, ansiColor, timestamps
            
        } finally {
            // Clean up - remove jenkins slave that was created
        
            Node bastionSlave = Jenkins.instance.getNode(bastionLabel);
            if(bastionSlave != null) {
                Boolean isIdle = bastionSlave.toComputer().isIdle();
                if(isIdle) {
                    Jenkins.instance.removeNode(bastionSlave);
                }
            }
        }
