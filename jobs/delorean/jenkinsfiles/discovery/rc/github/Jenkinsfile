#!groovy
@Library('delorean-pipeline-library') _

import org.integr8ly.GitHubUtils
import org.integr8ly.RegistryImage

def installationGitUrl = params.installationGitUrl ?: 'git@github.com:integr8ly/installation.git'
def installationGitRef = params.installationGitRef ?: 'master'
def githubToken = params.githubToken ?: 'jenkins-github-api-token'
def githubCredentialsID = params.credentialId ?: 'jenkinsgithub'
def projectOrg = params.projectOrg
def projectRepo = params.projectRepo
def productName = params.productName
def rcBranch = params.installationProductBranch ?: "${productName}-rc"
def installationManifestFile = './inventories/group_vars/all/manifest.yaml'
def integreatlyMetaFile = "integreatly.yml"
def integreatlyMetaFileForceUpdate = true

def templatesGitTagVar = params.releaseTagVar ?: params.productVersionVar
def templatesForkOrg = "integr8ly"
def templatesGitUrl = "https://github.com/${projectOrg}/${projectRepo}.git"
def templatesForkGitUrl = "https://github.com/${templatesForkOrg}/${projectRepo}.git"
def templatesDir = params.templatesDir
def templatesResourcesBaseRawVar = params.templatesResourcesBaseRawVar
def templatesResourcesGitUrlVar = params.templatesResourcesGitUrlVar
def latestPreRelease

String brewContainerRegistry = "brew-pulp-docker01.web.prod.ext.phx2.redhat.com:8888"
String rhContainerRegistry = "registry.redhat.io"
String rhContainerRegistry2 = "registry.access.redhat.com"
String clusterContainerRegistryPrivate = "docker-registry.default.svc:5000"

def rhRegistries = [brewContainerRegistry, rhContainerRegistry, rhContainerRegistry2]
def productImages = []
def productPreReleaseImages = []
def registryProjectIDs = params.registryProjectIDs.split(',')

currentBuild.displayName = "${currentBuild.displayName} ${productName}"

String getThreescalePrerelease(projectOrg, projectRepo, githubToken) {
    def ghUtils = new org.integr8ly.GitHubUtils()
    def rcTagRef = '-CR'
    return ghUtils.ghGetLatestReleaseByTag(projectOrg, projectRepo, githubToken, rcTagRef)
}

String getAmqOnlinePrerelease(projectOrg, projectRepo, githubCredentialsID) {
    def amqOnlineGitUrl = "git@github.com:${projectOrg}/${projectRepo}.git"
    def amqOnlineMasterBranch = "amq-online-1-dev"
    def amqOnlineLatestRC = ""
    def rcFilter = "grep 'amq-online-' | grep -v 'dev'"

    dir('amq_online') {
        gitCheckoutRepo(amqOnlineGitUrl, amqOnlineMasterBranch, githubCredentialsID, '.')
        amqOnlineLatestRC = sh(returnStdout: true, script: "git for-each-ref refs/remotes/origin --format='%(refname:short)' | ${rcFilter} | sort -r | head -n 1").trim()
        amqOnlineLatestRC = amqOnlineLatestRC.minus("origin/")
    }

    return amqOnlineLatestRC
}

String getFuseOnlinePrerelease(projectOrg, projectRepo, githubToken) {
    def ghUtils = new org.integr8ly.GitHubUtils()
    return ghUtils.ghGetLatestReleaseByTag(projectOrg, projectRepo, githubToken)
}

String getLatestPreRelease(projectOrg, projectRepo, productName, githubToken, githubCredentialsID) {
    String result = null
    switch (productName) {
        case '3scale':
            result = getThreescalePrerelease(projectOrg, projectRepo, githubToken)
            break
        case 'amq-online':
            result = getAmqOnlinePrerelease(projectOrg, projectRepo, githubCredentialsID)
            break
        case 'fuse-online':
            result = getFuseOnlinePrerelease(projectOrg, projectRepo, githubToken)
            break
    }
    return result
}

node('cirhos_rhel7') {
    cleanWs()

    println "[INFO] productName: ${productName}, templatesGitUrl: ${templatesGitUrl}, templatesForkGitUrl: ${templatesForkGitUrl}, templatesDir: ${templatesDir}"

    stage('Fetch Installation Repo') {
        println '[INFO] Fetch Installation Repo'
        dir('installation') {
            gitCheckoutRepo(installationGitUrl, installationGitRef, githubCredentialsID, '.')
            releaseConfig = readYaml file: installationManifestFile
        }
    }

    stage('Fetch Latest Pre Release (RC)') {
        latestPreRelease = getLatestPreRelease(projectOrg, projectRepo, productName, githubToken, githubCredentialsID)
        if (!latestPreRelease) {
            error "[ERROR] Unable to retrieve latest pre release version!"
        }
        println "[INFO] latestPreRelease = ${latestPreRelease}"
    }

    stage('Fetch Product Templates Repo') {
        println '[INFO] Fetch Product Templates Repo'
        dir('product-templates') {
            gitCheckoutRepo(templatesGitUrl, latestPreRelease, githubCredentialsID, '.')
        }
    }

    currentBuild.description = "current: ?\n latest: ${latestPreRelease}\n"

    String templatesIntlyBranch = "${latestPreRelease}-intly"
    String templatesResourcesBaseRaw = "https://raw.githubusercontent.com/${templatesForkOrg}/${projectRepo}/${templatesIntlyBranch}/${templatesDir}"

    dir('product-templates') {
        sshagent([githubCredentialsID]) {
            sh 'git config --global user.name "Automatron"'
            sh 'git config --global user.email "github.eng@feedhenry.com"'
            sh "git remote add intly ${GitHubUtils.ghTransformUrl(templatesForkGitUrl, 'ssh')}"
            sh "git fetch --all"

            stage('Collect Product Images') {
                dir(templatesDir) {
                    productImages = rhRegistries.collect { registry ->
                        registryProjectIDs.collect { registryID ->
                            println "Checking for registry: ${registry}, registryID: ${registryID}"
                            sh(returnStdout: true, script: "find . -name \'*.y*ml\' -exec grep -oP \'${registry}/${registryID}.*/[^[:blank:]].*\' {} \\; | sort | uniq").replace('"', '').split('\n')
                        }
                    }.flatten() - null - ''
                    productImages = productImages.unique()
                }
                println "[INFO] Found ${productImages.size()} product images"
                currentBuild.description = currentBuild.description + "\nImages: ${productImages.size()}\n"
            }

            stage('Collect Product Pre Release Images') {
                //iterate over productImages and produce an array of images that are not GA
                def targetRegistrySecret = 'intly-redhat-registry-sa'
                def targetRegistryHost = 'https://registry.redhat.io'
                productPreReleaseImages = productImages.collect { imageUrl ->
                    println "Verify Pre Release image: ${imageUrl}"
                    def image = new RegistryImage(imageUrl)
                    try {
                        def params = [
                                credentials: targetRegistrySecret,
                                host: targetRegistryHost,
                                image: image.getPath(),
                                tag: image.getTag()
                        ]
                        registryHasImage(params) ? null : imageUrl
                    } catch (Exception e) {
                        //ToDo Unsure what to do here, some images don't appear to be made available on registry.redhat.io (fuse7/fuse-postgres-exporter and fuse7/fuse-ignite-uprade)
                        println "Failed checking ${image.getPath()} with ${image.getTag()}, adding image to productPreReleaseImages"
                        imageUrl
                    }
                }.flatten() - null - ''
                println "[INFO] Found ${productPreReleaseImages.size()} pre release product images"
                currentBuild.description = currentBuild.description + "\nPre Release Images: ${productPreReleaseImages.size()}\n"
            }

            stage('Ensure Templates Intly Branch') {
                println("[INFO] Ensure Templates Intly Branch: ${templatesIntlyBranch}")
                gitCreateAndCheckoutBranch(templatesIntlyBranch, true, true, 'intly')
                //Currently on amq online use branches *only*, so rebase will fail, and should, when it's a tag
                def isBranch = (sh(script: "git show-ref --verify refs/heads/${latestPreRelease}", returnStatus: true) == 0)
                if (isBranch) {
                    try {
                        sh "git rebase origin/${latestPreRelease}"
                    } catch (Exception e) {
                        sh "git rebase --abort"
                    }
                }
                currentBuild.description = currentBuild.description + "\nTemplates: ${GitHubUtils.ghTransformUrl(templatesForkGitUrl, 'https', true)}/tree/${templatesIntlyBranch}\n"
            }

            stage('Update Product Image Registry') {
                gitCommitWhenChanges("Updated pre release image references to use internal cluster registry") { msgs ->
                    dir(templatesDir) {
                        productPreReleaseImages.each { imageUrl ->
                            String clusterImage = "${clusterContainerRegistryPrivate}${new URI("docker://${imageUrl}").getPath()}"
                            println("rhImage: ${imageUrl}, clusterImage: ${clusterImage}")
                            String rhImageUrlEscaped = imageUrl.replace("/", "\\/")
                            String clusterImageUrlEscaped = clusterImage.replace("/", "\\/")
                            sh "find . -name '*.y*ml' -exec sed -i -e 's/${rhImageUrlEscaped}/${clusterImageUrlEscaped}/g' {} \\;"
                        }
                    }
                    sh "git diff"
                }
            }

            stage('Push Templates Intly Branch') {
                boolean doPush = templatesIntlyBranch != 'master'
                if (doPush) {
                    sh "git push intly ${templatesIntlyBranch} --force"
                }
            }
        }
    }

    dir('installation') {
        sshagent([githubCredentialsID]) {
            sh 'git config --global user.name "Automatron"'
            sh 'git config --global user.email "github.eng@feedhenry.com"'

            stage('Ensure Product RC Branch') {
                gitCreateAndCheckoutBranch(rcBranch, true, true)
                gitRebaseBranch(installationGitRef, rcBranch, false)
                currentBuild.description = currentBuild.description + "\nInstallation: ${GitHubUtils.ghTransformUrl(installationGitUrl, 'https', true)}/tree/${rcBranch}\n"
            }

            stage('Product Version Update') {
                gitCommitWhenChanges("Updated ${productName} product version to ${latestPreRelease}") { msgs ->
                    manifestFileTxt = readFile(installationManifestFile)
                    manifestFileTxt = updateManifestVariable(manifestFileTxt, templatesGitTagVar, templatesIntlyBranch)
                    manifestFileTxt = updateManifestVariable(manifestFileTxt, templatesResourcesBaseRawVar, templatesResourcesBaseRaw)
                    manifestFileTxt = updateManifestVariable(manifestFileTxt, templatesResourcesGitUrlVar, templatesForkGitUrl)
                    writeFile file: installationManifestFile, text: manifestFileTxt
                }
            }

            stage('Image Sync Meta Update') {
                gitCommitWhenChanges("Updated imageSync options for ${latestPreRelease}") { msgs ->
                    def metaConfig = [imageSync: [sourceRepo: brewContainerRegistry, projects: [:]]]
                    if (fileExists(integreatlyMetaFile)) {
                        if (!integreatlyMetaFileForceUpdate) {
                            metaConfig = readYaml file: integreatlyMetaFile
                        }
                        //Delete the file here since 'writeYaml' will fail if the file already exists
                        sh "rm integreatly.yml"
                    }
                    productPreReleaseImages.each { imageUrl ->
                        URI uri = new URI("docker://${imageUrl}");
                        def pathParts = uri.getPath().split(/\//) - null - ''
                        def project = pathParts[0]
                        def image = pathParts[1]
                        if (!metaConfig['imageSync']['projects'].containsKey(project)) {
                            metaConfig['imageSync']['projects'][project] = [images: []]
                        }
                        metaConfig['imageSync']['projects'][project]['images'] << image
                    }
                    writeYaml file: integreatlyMetaFile, data: metaConfig
                    sh "git add integreatly.yml"
                    sh "git status"
                }
            }

            stage('Push Product RC Branch') {
                boolean doPush = rcBranch != 'master'
                if (doPush) {
                    gitPushBranch(rcBranch, true)
                }
            }
        }
    }
}
