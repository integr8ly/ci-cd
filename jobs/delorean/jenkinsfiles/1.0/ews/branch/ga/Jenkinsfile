#!groovy
import org.integr8ly.GitHubUtils

@Library('delorean-pipeline-library') _
def ghUtils = new GitHubUtils()

import org.kohsuke.github.GHCommitState
import org.kohsuke.github.GHPullRequest
import org.kohsuke.github.GitHub
import org.kohsuke.github.GitHubBuilder

def createJiraQuery(labels) {
  String query = "project = INTLY AND (status != Closed OR status != Resolved OR status != Completed)"

  for (i = 0; i < labels.size(); i++) {
    def label = labels[i].replaceAll('"', "'")
    query = "${query} AND labels=${label}"
  }

  return query
}

def createJiraBody(summary, description, gitPrUrl, labels) {
  return """{
      "fields": {
          "project": {
              "id": "12321620",
              "key": "INTLY",
              "name": "Integreatly"
          },
          "summary": "${summary}",
          "description": "${description}",
          "labels": ${labels},
          "issuetype": {
              "name": "Task"
          },
          "priority": {
              "id": "3",
              "name": "Major"
          },
          "customfield_12310220": "${gitPrUrl}"
      }
  }"""
}

def ghOwner = "integr8ly"
def ghRepo = "installation"
def installationGitUrl = params.installationGitUrl ?: 'git@github.com:integr8ly/installation.git'
def sourceBranch = params.installationProductBranch
def targetBranch = params.installationTargetBranch ?: 'master'
def githubSSHCredentialsID = 'jenkinsgithub'
def githubUserPassCredentialsID = 'githubjenkins'
def productName = params.productName
def sourceChanges = false
boolean runIntegrationTests = false
boolean dryRun = params.dryRun
String prUrl
final String ghCommitStatusContext = 'delorean/integration-tests'
String integrationTestsGHLabel = "integration tests"
def jiraUserPass = params.jiraUserPass ?: 'integreatly-jira-bot'
def productVersionVar = params.productVersionVar
def productVersion
String[] defaultPRLabels = ["product update", productName]
def installationManifestFile = './inventories/group_vars/all/manifest.yaml'
String jiraRestApiUrl = "https://issues.redhat.com/rest/api/2"

currentBuild.description = "sourceBranch: ${sourceBranch}\n targetBranch: ${targetBranch}"

String[] jiraLabelsFor(String productName, String targetBranch, def labels = []) {
    def defaultLabels = [
            /"unplanned"/,
            /"${productName}"/
    ]
    if('master' != targetBranch) {
        labels << /"${targetBranch}"/
    }
    return labels + defaultLabels
}

String jiraSummaryFor(String productName, String targetBranch) {
    String summary = "Update ${productName} "
    if('master' != targetBranch) {
        summary = summary + "(${targetBranch})"
    }
    return summary
}

String jiraDescriptionFor(String productName, String targetBranch, String prUrl) {
    return "Update of ${productName} is availabe to go back to ${targetBranch}. PR: ${prUrl}"
}

node {
    cleanWs()
    stage('Checkout') {
        gitCheckoutRepo(installationGitUrl, sourceBranch, githubSSHCredentialsID, 'installation')
    }

    stage('Check Source vs Target') {
        dir('installation') {
            sourceChanges = gitHasSourceChanges(sourceBranch, targetBranch)
            productVersion = getProductVersionFromManifest(productVersionVar, installationManifestFile)
        }
    }

    stage('Create PR') {
        when(sourceChanges) {
            println("Creating PR for ${productName}:${productVersion}")
            withCredentials([usernamePassword(
                    credentialsId: githubUserPassCredentialsID,
                    passwordVariable: 'GITHUB_PASSWORD',
                    usernameVariable: 'GITHUB_USERNAME')]) {
                final GitHub gitHub = new GitHubBuilder()
                        .withOAuthToken(env.GITHUB_PASSWORD, env.GITHUB_USERNAME)
                        .build()
                String title = "[WIP] ${productName} update"
                String body = "Created automatically by jenkins"

                if (dryRun) {
                    println "Finds an open pull request with the base branch '${sourceBranch}'. If this does not exist, it creates a new pull request with the following details:\ntitle:'${title}',\nbody '${body}',\nlabels:${defaultPRLabels}"
                    prUrl = "https://github.com/example-pr-url"
                } else {
                    GHPullRequest pr = ghUtils.ghFindOrCreatePullRequest(gitHub.getRepository("${ghOwner}/${ghRepo}"), "${ghOwner}:${sourceBranch}", targetBranch, title, body, defaultPRLabels)
                    prUrl = pr.getHtmlUrl()
                    runIntegrationTests = ghUtils.ghPrHasLabel(pr, integrationTestsGHLabel)
                }
                
                println "Component Update PR = ${prUrl}, runIntegrationTests = ${runIntegrationTests}"
            }
        }
    }

    stage('Create Product Update Jira') {
        when(sourceChanges) {
            String[] labels = jiraLabelsFor(productName, targetBranch, [/"product-update"/])
            String summary = jiraSummaryFor(productName, targetBranch)
            String description = jiraDescriptionFor(productName, targetBranch, prUrl)
            String query = createJiraQuery(labels)
            def body = createJiraBody(summary, description, prUrl, labels)
            def jiraID = jiraCreateIssue(jiraUserPass, jiraRestApiUrl, query, body)
            println "[INFO] Issue created: https://issues.redhat.com/browse/${jiraID}"
        }
    }

    stage('Integration Tests') {
        when(sourceChanges && runIntegrationTests) {
            withCredentials([usernamePassword(
                    credentialsId: githubUserPassCredentialsID,
                    passwordVariable: 'GITHUB_PASSWORD',
                    usernameVariable: 'GITHUB_USERNAME')]) {
                final GitHub gitHub = new GitHubBuilder()
                        .withOAuthToken(env.GITHUB_PASSWORD, env.GITHUB_USERNAME)
                        .build()
                ghUtils.ghUpdatePrCommitStatus(gitHub, prUrl, GHCommitState.PENDING, env.BUILD_URL, 'Pending', ghCommitStatusContext)
            }
            try {
                def jobName = 'openshift-cluster-integreatly-test'
                def jobParams = [
                        [$class: 'StringParameterValue', name: 'installationGitUrl', value: installationGitUrl],
                        [$class: 'StringParameterValue', name: 'installationGitBranch', value: sourceBranch],
                        [$class: 'BooleanParameterValue', name: 'dryRun', value: dryRun]
                ]
                build job: jobName, parameters: jobParams
            } catch (Exception e) {
                withCredentials([usernamePassword(
                        credentialsId: githubUserPassCredentialsID,
                        passwordVariable: 'GITHUB_PASSWORD',
                        usernameVariable: 'GITHUB_USERNAME')]) {
                    final GitHub gitHub = new GitHubBuilder()
                            .withOAuthToken(env.GITHUB_PASSWORD, env.GITHUB_USERNAME)
                            .build()
                    ghUtils.ghUpdatePrCommitStatus(gitHub, prUrl, GHCommitState.FAILURE, env.BUILD_URL, 'Failure', ghCommitStatusContext)
                    error "Integration test failures, ${installationGitUrl}, ${sourceBranch}, ${e}"
                }
            }
            withCredentials([usernamePassword(
                    credentialsId: githubUserPassCredentialsID,
                    passwordVariable: 'GITHUB_PASSWORD',
                    usernameVariable: 'GITHUB_USERNAME')]) {
                final GitHub gitHub = new GitHubBuilder()
                        .withOAuthToken(env.GITHUB_PASSWORD, env.GITHUB_USERNAME)
                        .build()
                ghUtils.ghUpdatePrCommitStatus(gitHub, prUrl, GHCommitState.SUCCESS, env.BUILD_URL, 'Success', ghCommitStatusContext)
            }
        }
    }
}
