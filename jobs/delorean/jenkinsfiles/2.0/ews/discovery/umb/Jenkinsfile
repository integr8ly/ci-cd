pipeline {
    agent any

    parameters {
        // https://datagrepper.engineering.redhat.com/id?id=ID:messaging-devops-broker02.web.prod.ext.phx2.redhat.com-44775-1580379079663-8:893046:0:0:1&is_raw=true&size=extra-large
        string defaultValue: '', description: 'This will be populated by the CI trigger', name: 'CI_MESSAGE', trim: true
    }
    stages {

        stage('Process UMB Message') {
            steps {
                //ToDo Process the input UMB Message (CI_MESSAGE) to extract information required by the following stages
                echo "Process UMB Message"
            }
        }

        stage('Clone Operator Repo') {
            steps {
                cleanWs()
                script {
                    sh 'git clone https://github.com/laurafitzgerald/integreatly-operator.git'
                }
            }
        }

        stage("Ensure Product Branch") {
            steps {
                script {
                    dir("${env.WORKSPACE}/integreatly-operator"){
                        //This branch can be updated later, just using the pushed one for now
                        sh 'git checkout INTLY-4795'
                    } 
                }
            }
        }

        stage('Extract and Process Manifests') {
            steps {
                dir("${env.WORKSPACE}/integreatly-operator"){
                    // final Map msg = readJSON text: CI_MESSAGE
                    sh "scripts/process-image-manifests registry-proxy.engineering.redhat.com/rh-osbs/3scale-amp2-3scale-rhel7-operator-metadata:1.11.0-3"
                }
            }
        }

        stage('Process Manifest Images') {
            steps {
                //ToDo Process the manifests CSV to update release image registries for any non GA images (Generates image_mirror_mapping file)
                echo "Process Manifest Images"
            }
        }

        stage('Mirror Images') {
            steps {
                //ToDo Mirror any pre release images to the delorean quay.io account
                echo "Mirror Images"
            }
        }

        stage('Push Branch') {
            steps {
                //ToDo Push the product branch if an changes have been made
                echo "Push Branch"
            }
        }

        stage('Create Pull Request') {
            steps {
                //ToDO Create a Pull Request against the target branch (master) if changes have been made
                echo "Create Pull Request"
            }
        }

        stage('Create Jira') {
            steps {
                //ToDo Cretae a Jira linked to the pull request for this update if changes have been made
                echo "Create Jira"
            }
        }
    }

    post {
        always {
            script {
                final Map msg = readJSON text: CI_MESSAGE
                String mailTo = 'cloud-services-delorean@redhat.com'
                mail(
                        subject: "New build of ${msg.info.name} created in Brew",
                        to: mailTo,
                        body: [
                                "A brew build was created for ${msg.info.name}",
                                "image_url: ${msg.info.extra.image.index.pull[1]}",
                                "product_name: ${msg.info.name}",
                                "jenkins_job: ${env.BUILD_URL}"
                        ].join('\n')
                )
            }
        }
    }
}
