#!groovy
@Library('delorean-pipeline-library') _

pipeline {
    agent any

    parameters {
        // https://datagrepper.engineering.redhat.com/id?id=ID:messaging-devops-broker02.web.prod.ext.phx2.redhat.com-44775-1580379079663-8:893046:0:0:1&is_raw=true&size=extra-large
        string defaultValue: '', description: 'This will be populated by the CI trigger', name: 'CI_MESSAGE', trim: true
        string defaultValue: '', description: 'The name of the product', name: 'product'
        string defaultValue: 'delorean-ews', description: 'The base branch for the <product>-next branch', name: 'baseBranch'
    }

    environment {
        productBranch = "${product}-next"
    }
    stages {

        stage('Process UMB Message') {
            steps {
                //ToDo Process the input UMB Message (CI_MESSAGE) to extract information required by the following stages
                echo "Process UMB Message"
            }
        }

        stage('Clone Operator Repo') {
            steps {
                cleanWs()
                git branch: '${baseBranch}', url: 'https://github.com/integr8ly/integreatly-operator'
            }
        }

        stage("Ensure Product Branch") {
            steps {
                withCredentials([usernamePassword(credentialsId: 'githubjenkins', passwordVariable: 'gitPassword', usernameVariable: 'gitUsername')]) {
                    sh("""
                        git config --global user.name 'Automatron'
                        git config --global user.email 'github.eng@feedhenry.com'
                        git config --global credential.username ${gitUsername}
                        git config --global credential.helper "!echo password=${gitPassword}; echo"
                       """)
                }
                script {
                    def checkout = sh(script: 'git checkout ${productBranch}', returnStatus: true)
                    if (checkout) {
                        sh("""
                            git checkout -B ${productBranch}
                           """)
                    }
                    sh 'git rebase ${baseBranch}'
                }
            }
        }

        stage('Extract and Process Manifests') {
            steps {
                //ToDo Extract the manifests from a container image and process them as required
                echo "Extract and Process Manifests"
            }
        }

        stage('Process Manifest Images') {
            steps {
                gitCommitWhenChanges("Updated image_mirror_mapping") { msgs ->
                    sh "scripts/process-csv-images ${product}"
                }
            }
        }

        stage('Mirror Images') {
            steps {
                //ToDo Mirror any pre release images to the delorean quay.io account
                echo "Mirror Images"
            }
        }

        stage('Push Branch') {
            steps {
                script {
                    int commmitCount = sh(returnStdout: true, script: "git log origin/${baseBranch}..${productBranch} --pretty=o | wc -l").trim() as int
                    def existingBranchCommitHash = sh(returnStdout: true, script: "git ls-remote origin refs/heads/${productBranch} | cut -f 1").trim()

                    boolean doPush = false

                    if (product != 'master') and (productBranch != 'master') {
                        if (existingBranchCommitHash) {
                            doPush = true
                        } else {
                            doPush = commmitCount > 0
                        }
                    }
                    echo "doPush = ${doPush}"

                    if (doPush) {
                        gitPushBranch(productBranch, true)
                    } else {
                        echo "[INFO] Branch push criteria not met for ${productBranch}"
                    }
                }
            }
        }

        stage('Create Pull Request') {
            steps {
                //ToDO Create a Pull Request against the target branch (master) if changes have been made
                echo "Create Pull Request"
            }
        }

        stage('Create Jira') {
            steps {
                //ToDo Cretae a Jira linked to the pull request for this update if changes have been made
                echo "Create Jira"
            }
        }
    }

    post {
        always {
            script {
                final Map msg = readJSON text: CI_MESSAGE
                String mailTo = 'cloud-services-delorean@redhat.com'
                mail(
                        subject: "New build of ${msg.info.name} created in Brew",
                        to: mailTo,
                        body: [
                                "A brew build was created for ${msg.info.name}",
                                "image_url: ${msg.info.extra.image.index.pull[1]}",
                                "product_name: ${msg.info.name}",
                                "jenkins_job: ${env.BUILD_URL}"
                        ].join('\n')
                )
            }
        }
    }
}
