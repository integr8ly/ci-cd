---
- name: "Check if {{ credential.key }} exists"
  uri:
    method: GET
    url: "{{ jenkins_url }}/credentials/store/system/domain/_/credential/{{ credential.key }}"
    user: "{{ jenkins_admin_username }}"
    password: "{{ jenkins_admin_password }}"
    force_basic_auth: yes
    validate_certs: no
  register: get_credentials_cmd
  failed_when: false

- name: "Delete {{ credential.key }}"
  uri:
    method: POST
    url: "{{ jenkins_url }}/credentials/store/system/domain/_/credential/{{ credential.key }}/doDelete"
    user: "{{ jenkins_admin_username }}"
    password: "{{ jenkins_admin_password }}"
    headers: "{{ req_headers | items2dict }}"
    force_basic_auth: yes
    validate_certs: no
    status_code: 302
  when: get_credentials_cmd.status == 200

- name: Set payload for creating ssh user with private key credential
  set_fact:
    payload: "{{ lookup('template', 'ssh_user_key_credential.txt.j2') }}"
  when: type == "ssh_user_with_private_key"

- name: Set payload for creating user pass credential
  set_fact:
    payload: "{{ lookup('template', 'user_pass_credential.txt.j2') }}"
  when: type == "user_pass"

- name: Set payload for creating secret text credential
  set_fact:
    payload: "{{ lookup('template', 'secret_text_credential.txt.j2') }}"
  when: type == "secret_text"

- name: Set payload for creating aws credential
  set_fact:
    payload: "{{ lookup('template', 'aws_credential.txt.j2') }}"
  when: type == "aws_creds"

- name: "Create {{ credential.key }}"
  uri:
    method: POST
    url: "{{ jenkins_url }}/credentials/store/system/domain/_/createCredentials"
    user: "{{ jenkins_admin_username }}"
    password: "{{ jenkins_admin_password }}"
    force_basic_auth: yes
    validate_certs: no
    headers: "{{ req_headers | items2dict }}"
    body: "{{ payload | replace('+', '%2B') }}"
    status_code: 200, 302